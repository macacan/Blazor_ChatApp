@page "/"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<div class="chat-container">
    <div class="form-group">
        <label for="userInput">User:</label>
        <input id="userInput" @bind="userInput" placeholder="Enter your name" />
    </div>

    <div class="form-group">
        <label for="messageInput">Message:</label>
        <input id="messageInput" @bind="messageInput" placeholder="Type a message..." />
    </div>
    <p id="errorMessage">@errorMessage</p>

    <button @onclick="Send" disabled="@(!IsConnected)">Send</button>

    <hr />

    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li class="@message.Item1">
                <div class="message-info">
                    <img src="@GetAvatar(message.Item1)" alt="User Avatar">
                    <div>
                        <span class="message-text">@message.Item2</span>
                        <span class="message-time">@message.Item3.ToString("HH:mm")</span>
                    </div>
                </div>
            </li>
        }
    </ul>
</div>

@code {
    private HubConnection? hubConnection;
    private List<Tuple<string, string, DateTime>> messages = new List<Tuple<string, string, DateTime>>();
    private string? userInput;
    private string? messageInput;
    private string? errorMessage;

    private DateTime date = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string, DateTime>("ReceiveMessage", (user, message, date) =>
        {
            var time = date.ToString("HH:mm");
            string messageClass = user == userInput ? "user" : "other"; // Determine if it's the sender or receiver
            messages.Add(Tuple.Create(messageClass, $"{user}: {message}", date));
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (string.IsNullOrEmpty(userInput))
        {
            errorMessage = "Enter a username";
            return;
        }
        else
        {
            errorMessage = "";
        }

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput, date);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private string GetAvatar(string userType)
    {
        // You can replace these paths with real avatars if needed
        return userType == "user" ? "/images/user-avatar.png" : "/images/other-avatar.png";
    }
}
