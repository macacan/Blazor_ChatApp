@page "/"  
@rendermode InteractiveWebAssembly 
@using Microsoft.AspNetCore.SignalR.Client  
@inject NavigationManager Navigation  
@implements IAsyncDisposable 

<PageTitle>Chat</PageTitle>

<div class="chat-page">
    <t class="titlename">Whatsapp 2.0</t>  

    <!-- Chatten där meddelanden visas -->
    <div class="chat-container">
        <ul id="messagesList">
            @foreach (var message in messages)
            {
                <li class="@message.Item1">
                    <div class="message-info">
                        <img src="@GetAvatar(message.Item1, message.Item2.Split(':')[0])" alt="User Avatar">
                        <div>
                            <span class="message-text">@message.Item2</span>
                            <span class="message-time">@message.Item3.ToString("HH:mm")</span>
                        </div>
                    </div>
                </li>
            }
        </ul>
    </div>

    <div class="input-container">
        <div class="form-group">
            <input id="userInput" @bind="userInput" placeholder="Enter your name" />
        </div>

        <div class="form-group">
            <input id="messageInput" @bind="messageInput" placeholder="Type a message..." />
        </div>

        <p id="errorMessage">@errorMessage</p>

        <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
    </div>
</div>

@code {
    private HubConnection? hubConnection;  
    private List<Tuple<string, string, DateTime>> messages = new List<Tuple<string, string, DateTime>>();  
    private string? userInput;  
    private string? messageInput;  
    private string? errorMessage;  
    private DateTime date = DateTime.Now;  

    //Körs när komponenten initialiseras. Här ansluter vi till SignalR-hubben.
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string, DateTime>("ReceiveMessage", (user, message, date) =>
        {
            string messageClass = user == userInput ? "user" : "other";

            messages.Add(Tuple.Create(messageClass, $"{user}: {message}", date));
            InvokeAsync(StateHasChanged);  //Berättar för Blazor att UI:t behöver uppdateras
        });

        await hubConnection.StartAsync();
    }

    //Metoden som körs när användaren trycker på "Send"-knappen
    private async Task Send()
    {
        if (string.IsNullOrEmpty(userInput))
        {
            errorMessage = "Enter a username";  
            return;  
        }
        else
        {
            errorMessage = ""; 
        }

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput, date);

            messageInput = string.Empty;
        }
    }

    //Kontroll om SignalR-anslutningen är aktiv
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();  
        }
    }

    //Metod för att hämta avatarbild baserat på användartyp och namn
    private string GetAvatar(string userType, string username)
    {
        if (userType == "user") 
        {
            return $"https://ui-avatars.com/api/?name={Uri.EscapeDataString(userInput)}&background=random&size=128";
        }
        else
        {
            return $"https://ui-avatars.com/api/?name={Uri.EscapeDataString(username)}&background=random&size=128";
        }
    }
}
